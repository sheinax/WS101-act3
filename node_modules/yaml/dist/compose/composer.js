 Microsoft.–ü–æ–º–æ—â –æ—Ç Microsoft Edge–ò—Å–∫–∞—Ç–µ –ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –¥–∞ –≤–ª–∏–∑–∞—Ç–µ –≤ —Å–∞–π—Ç–æ–≤–µ –Ω–∞ Microsoft —Å —Ç–µ–∫—É—â–∏—è —Å–∏ –ø—Ä–æ—Ñ–∏–ª?–ò–∑–ª–µ–∑–ª–∏ —Å—Ç–µ –æ—Ç —Å–∞–π—Ç –Ω–∞ Microsoft –ø—Ä–µ–¥–∏. –ò–∑–±–µ—Ä–µ—Ç–µ "–î–∞" —Ç—É–∫, –∑–∞ –¥–∞ –≤–ª–∏–∑–∞—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤ —Å–∞–π—Ç–æ–≤–µ –Ω–∞ Microsoft, –∫–∞—Ç–æ Bing –∏ Outlook, –∫–∞—Ç–æ –∏–∑–ø–æ–ª–∑–≤–∞—Ç–µ —Ç–µ–∫—É—â–∏—è —Å–∏ –ø—Ä–æ—Ñ–∏–ª.–í–ª–µ–∑—Ç–µ –æ—Ç–Ω–æ–≤–æ –≤ —Å–∞–π—Ç–æ–≤–µ—Ç–µ –Ω–∞ Microsoft–ó–∞ –¥–∞ –≤–ª–µ–∑–µ—Ç–µ –≤ $1 –∏ –¥—Ä—É–≥–∏ —Å–∞–π—Ç–æ–≤–µ –Ω–∞ Microsoft, –∏–∑–±–µ—Ä–µ—Ç–µ "–í–ª–∏–∑–∞–Ω–µ" –æ—Ç–Ω–æ–≤–æ.–í–ª–µ–∑—Ç–µ –±—ä—Ä–∑–æ –≤ —Å–∞–π—Ç–æ–≤–µ –Ω–∞ Microsoft, –∫–∞—Ç–æ –≤–ª–µ–∑–µ—Ç–µ –≤ Microsoft Edge–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–ª–∏–∑–∞–Ω–µ –≤ —Å–∞–π—Ç–æ–≤–µ –Ω–∞ Microsoft, –∫–∞—Ç–æ –Ω–∞–ø—Ä–∏–º–µ—Ä Bing –∏ Outlook, —á—Ä–µ–∑ –≤–ª–∏–∑–∞–Ω–µ –≤ Microsoft Edge.–í–∞—à–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–Ω–∏, –ø–∞—Ä–æ–ª–∏, —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—è –∏ –¥—Ä—É–≥–∏ –¥–∞–Ω–Ω–∏ –∑–∞ —Å—ä—Ä—Ñ–∏—Ä–∞–Ω–µ—Ç–æ —Å–∞ –Ω–∞–ª–∏—á–Ω–∏ –Ω–∞ –≤—Å–∏—á–∫–∏ –≤–∞—à–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞. –ú–æ–∂–µ—Ç–µ –¥–∞ –∏–∑–±–µ—Ä–µ—Ç–µ –¥–∞ –∏–∑–ª–µ–∑–µ—Ç–µ –æ—Ç $1.–°–µ–≥–∞ —Å—Ç–µ –≤–ª–µ–∑–ª–∏ –≤ Microsoft Edge–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–ª–∏–∑–∞–Ω–µ –≤ —Ç–æ–∑–∏ —Å–∞–π—Ç —Å —Ç–æ–∑–∏ –ø—Ä–æ—Ñ–∏–ª?Microsoft Edge —â–µ –∏–∑–ø–æ–ª–∑–≤–∞ —Ç–æ–∑–∏ –ø—Ä–æ—Ñ–∏–ª –∑–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–ª–∏–∑–∞–Ω–µ –≤ —Ç–æ–∑–∏ —Å–∞–π—Ç –ø—Ä–∏ –≤—Å—è–∫–æ –ø–æ—Å–µ—â–µ–Ω–∏–µ.–í–ª–µ–∑—Ç–µ –∫–∞—Ç–æ $1–ü—Ä–æ–º–µ–Ω–µ—Ç–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–Ω–∏–µ—Ç–æ —Å–∏ –∑–∞ –ø—Ä–æ—Ñ–∏–ª –ø–æ–¥ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏", –∞–∫–æ –∏—Å–∫–∞—Ç–µ –¥–∞ –ø—Ä–æ–ø—É—Å–Ω–µ—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ—Ç–æ –≤–ª–∏–∑–∞–Ω–µ.–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–í–∞—à–∏—è—Ç –ø—Ä–æ—Ñ–∏–ª–í–ª–µ–∑—Ç–µ –≤ Microsoft Edge, –≤–ª–µ–∑—Ç–µ –Ω–∞–≤—Å—è–∫—ä–¥–µ.–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–ª–∏–∑–∞–Ω–µ –≤ —Ç–æ–∑–∏ —Å–∞–π—Ç –∏ –¥—Ä—É–≥–∏ —Å–∞–π—Ç–æ–≤–µ –Ω–∞ Microsoft, –∫–æ–≥–∞—Ç–æ –≤–ª–∏–∑–∞—Ç–µ –≤ Microsoft Edge.–í–ª–µ–∑—Ç–µ –≤ $1 —Å Microsoft–°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –∞–∫–∞—É–Ω—Ç –∑–∞ $1 —Å Microsoft–ò–∑–ø–æ–ª–∑–≤–∞–π—Ç–µ $1 —Å Microsoft–ü—Ä–æ–≤–µ—Ä—è–≤–∞–Ω–µ‚Ä¶–ü—Ä–æ–¥—ä–ª–∂–µ—Ç–µ –∫–∞—Ç–æ $1—Ç–æ–∑–∏ —É–µ–± —Å–∞–π—Ç–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å $1–ó–∞ –¥–∞ —Å—ä–∑–¥–∞–¥–µ—Ç–µ —Å–≤–æ—è –∞–∫–∞—É–Ω—Ç, Microsoft —â–µ —Å–ø–æ–¥–µ–ª–∏ –≤–∞—à–µ—Ç–æ –∏–º–µ, –∏–º–µ–π–ª –∞–¥—Ä–µ—Å –∏ —Å–Ω–∏–º–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª–∞ –≤–∏ —Å $1. –ú–æ–∂–µ—Ç–µ –¥–∞ –ø—Ä–æ–º–µ–Ω–∏—Ç–µ —Ç–µ–∑–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ $2.–ü–æ–≤–µ—Ä–∏—Ç–µ–ª–Ω–æ—Å—Ç & –±–∏—Å–∫–≤–∏—Ç–∫–∏–í–∫–ª—é—á–∏–û—â–µ –¥–µ–π—Å—Ç–≤–∏—è{COUNT, plural,
      =1 {–í–∞—à–∏—è—Ç –ø—Ä–æ–∑–æ—Ä–µ—Ü InPrivate –Ω—è–º–∞ –¥–∞ —Å–µ –æ—Ç–≤–æ—Ä–∏ —Å–ª–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ —Å—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ}
      one {–í–∞—à–∏—Ç–µ {COUNT} –ø—Ä–æ–∑–æ—Ä–µ—Ü–∞ InPrivate –Ω—è–º–∞ –¥–∞ —Å–µ –æ—Ç–≤–æ—Ä—è—Ç –æ—Ç–Ω–æ–≤–æ —Å–ª–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ —Å—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ}
      other {–í–∞—à–∏—Ç–µ {COUNT} –ø—Ä–æ–∑–æ—Ä–µ—Ü–∞ InPrivate –Ω—è–º–∞ –¥–∞ —Å–µ –æ—Ç–≤–æ—Ä—è—Ç –æ—Ç–Ω–æ–≤–æ —Å–ª–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ —Å—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ}}–í–µ—Ä—Å–∏—è $1 ($2) $3$4–î–æ—Å—Ç—ä–ø–Ω–æ—Å—Ç–ü—Ä–µ–≤–æ–¥ –Ω–∞ –∂–∏–≤–æ–ò–∑—Ç–µ–≥–ª—è–Ω–µ –Ω–∞ —Ñ–∞–π–ª–æ–≤–µ—Ç–µ –∑–∞ —Ä–∞–∑–ø–æ–∑–Ω–∞–≤–∞–Ω–µ –Ω–∞ –≥–æ–≤–æ—Ä‚Ä¶ $1%–û–±–ª–∏–∫–í—ä–≤–µ–∂–¥–∞–Ω–µ –Ω–∞ URL –∞–¥—Ä–µ—Å–¢–µ–º–∞–ü–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ –ª–µ–Ω—Ç–∞—Ç–∞ —Å –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–Ω–∏–ù–æ–≤–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–∞ —Ä–∞–∑–¥–µ–ª–ì–ª–∞–≤–Ω–æ –º–µ–Ω—é–¢—ä—Ä—Å–µ–Ω–µ –Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏–ù–∞—Å—Ç—Ä–æ–π–∫–∏–û—Ç–∏–¥–µ—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏—Ç–µ –Ω–∞ $1, –∑–∞ –¥–∞ –ø—Ä–æ–º–µ–Ω–∏—Ç–µ —Ç–æ–≤–∞–ü–æ –∏–∑–±–æ—Ä–ü—Ä–æ–≤–µ—Ä–µ—Ç–µ–ü—Ä–æ–∏–∑—Ö–æ–¥—ä—Ç —Ç—Ä—è–±–≤–∞ –¥–∞ –µ —Å–∏–≥—É—Ä–µ–Ω–î–æ–±–∞–≤—è–Ω–µ –Ω–∞ –∞–¥—Ä–µ—Å–†–µ–¥–∞–∫—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –∞–¥—Ä–µ—Å–°—Ç—Ä–∞–Ω–∞/—Ä–µ–≥–∏–æ–Ω–¢–µ–ª–µ—Ñ–æ–Ω–ò–º–µ–π–ª–ò–∑—Ç—Ä–∏–≤–∞–Ω–µ –Ω–∞ –∞–¥—Ä–µ—Å–†–µ–¥–∞–∫—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –∫–∞—Ä—Ç–∞–ó–∞ –¥–∞ –¥–æ–±–∞–≤–∏—Ç–µ –∏–ª–∏ —É–ø—Ä–∞–≤–ª—è–≤–∞—Ç–µ –º–µ—Ç–æ–¥–∏—Ç–µ —Å–∏ –∑–∞ –ø–ª–∞—â–∞–Ω–µ –≤ Google Pay, –ø–æ—Å–µ—Ç–µ—Ç–µ —Å–≤–æ—è <a href="$1" target="_blank">–∞–∫–∞—É–Ω—Ç –≤ Google</a>–î–æ–±–∞–≤—è–Ω–µ –Ω–∞ –∫–∞—Ä—Ç–∞–ò–º–µ –Ω–∞ –∫–∞—Ä—Ç–∞—Ç–∞–ù–æ–º–µ—Ä –Ω–∞ –∫–∞—Ä—Ç–∞–î–∞—Ç–∞ –Ω–∞ –∏–∑—Ç–∏—á–∞–Ω–µ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—Ç–∞–ú–µ—Å–µ—Ü –Ω–∞ –∏–∑—Ç–∏—á–∞–Ω–µ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—Ç–∞–ì– errors: this.errors,
            warnings: this.warnings
        };
    }
    /**
     * Compose tokens into documents.
     *
     * @param forceDoc - If the stream contains no document, still emit a final document including any comments and directives that would be applied to a subsequent document.
     * @param endOffset - Should be set if `forceDoc` is also set, to set the document range end and to indicate errors correctly.
     */
    *compose(tokens, forceDoc = false, endOffset = -1) {
        for (const token of tokens)
            yield* this.next(token);
        yield* this.end(forceDoc, endOffset);
    }
    /** Advance the composer by one CST token. */
    *next(token) {
        if (process.env.LOG_STREAM)
            console.dir(token, { depth: null });
        switch (token.type) {
            case 'directive':
                this.directives.add(token.source, (offset, message, warning) => {
                    const pos = getErrorPos(token);
                    pos[0] += offset;
                    this.onError(pos, 'BAD_DIRECTIVE', message, warning);
                });
                this.prelude.push(token.source);
                this.atDirectives = true;
                break;
            case 'document': {
                const doc = composeDoc.composeDoc(this.options, this.directives, token, this.onError);
                if (this.atDirectives && !doc.directives.docStart)
                    this.onError(token, 'MISSING_CHAR', 'Missing directives-end/doc-start indicator line');
                this.decorate(doc, false);
                if (this.doc)
                    yield this.doc;
                this.doc = doc;
                this.atDirectives = false;
                break;
            }
            case 'byte-order-mark':
            case 'space':
                break;
            case 'comment':
            case 'newline':
                this.prelude.push(token.source);
                break;
            case 'error': {
                const msg = token.source
                    ? `${token.message}: ${JSON.stringify(token.source)}`
                    : token.message;
                const error = new errors.YAMLParseError(getErrorPos(token), 'UNEXPECTED_TOKEN', msg);
                if (this.atDirectives || !this.doc)
                    this.errors.push(error);
                else
                    this.doc.errors.push(error);
                break;
            }
            case 'doc-end': {
                if (!this.doc) {
                    const msg = 'Unexpected doc-end without preceding document';
                    this.errors.push(new errors.YAMLParseError(getErrorPos(token), 'UNEXPECTED_TOKEN', msg));
                    break;
                }
                this.doc.directives.docEnd = true;
                const end = resolveEnd.resolveEnd(token.end, token.offset + token.source.length, this.doc.options.strict, this.onError);
                this.decorate(this.doc, true);
                if (end.comment) {
                    const dc = this.doc.comment;
                    this.doc.comment = dc ? `${dc}\n${end.comment}` : end.comment;
                }
                this.doc.range[2] = end.offset;
                break;
            }
            default:
                this.errors.push(new errors.YAMLParseError(getErrorPos(token), 'UNEXPECTED_TOKEN', `Unsupported token ${token.type}`));
        }
    }
    /**
     * Call at end of input to yield any remaining document.
     *
     * @param forceDoc - If the stream contains no document, still emit a final document including any comments and directives that would be applied to a subsequent document.
     * @param endOffset - Should be set if `forceDoc` is also set, to set the document range end and to indicate errors correctly.
     */
    *end(forceDoc = false, endOffset = -1) {
        if (this.doc) {
            this.decorate(this.doc, true);
            yield this.doc;
            this.doc = null;
        }
        else if (forceDoc) {
            const opts = Object.assign({ _directives: this.directives }, this.options);
            const doc = new Document.Document(undefined, opts);
            if (this.atDirectives)
                this.onError(endOffset, 'MISSING_CHAR', 'Missing directives-end indicator line');
            doc.range = [0, endOffset, endOffset];
            this.decorate(doc, false);
            yield doc;
        }
    }
}

exports.Composer = Composer;
